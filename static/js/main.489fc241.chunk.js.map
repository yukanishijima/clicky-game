{"version":3,"sources":["components/Card/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","data-id","id","onClick","cardClick","alt","name","src","image","data-clicked","clicked","Header","type","data-toggle","data-target","message","score","topScore","tabIndex","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","App","state","cards","cardClicked","filter","el","console","log","incrementScore","shuffle","setState","changeColor","shake","resetGame","newScore","newTopScore","array","i","length","j","Math","floor","random","temp","newCards","map","newObj","color","document","querySelector","setTimeout","removeClass","classList","add","remove","this","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.489fc241.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n  return (\n    <>\n      <div className=\"image-card\" data-id={props.id} onClick={() => props.cardClick(props.id)}>\n        <img alt={props.name} src={props.image} data-clicked={props.clicked} />\n      </div>\n    </>\n  );\n};\n\nexport default Card;","import React from 'react';\nimport \"./style.css\";\n\nfunction Header(props) {\n  return (\n    <>\n      <h1>Halloween Clicky Game</h1>\n      <button type=\"button\" className=\"modal-btn\" data-toggle=\"modal\" data-target=\"#instructions\">?</button>\n      <p id=\"msg\">{props.message}</p>\n\n      <div>\n        <span className=\"score\">Score {props.score}</span>\n        <span className=\"score\">Top Score {props.topScore}</span>\n      </div>\n\n      {/* modal */}\n      <div className=\"modal fade\" id=\"instructions\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\n        <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                <span aria-hidden=\"true\" className=\"close-btn\">&times;</span>\n              </button>\n            </div>\n            <div className=\"modal-body\">\n              <p><i className=\"fas fa-skull\"></i>&nbsp; Click each image only once and never repeat!</p>\n              <p><i className=\"fas fa-skull\"></i>&nbsp; Be careful, every time any image is clicked, all of the images shuffle in a random order.</p>\n              <p><i className=\"fas fa-skull\"></i>&nbsp; You will loose when you click on the same image more than once!</p>\n            </div>\n            <div className=\"modal-footer\">\n              <button type=\"button\" className=\"btn got-btn\" data-dismiss=\"modal\">Got it?</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport './App.css';\nimport Card from \"./components/Card\";\nimport Header from \"./components/Header\";\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n\n  state = {\n    cards,\n    message: \"Click any image to begin!\",\n    score: 0,\n    topScore: 0\n  };\n\n  cardClick = (id) => {\n    const cardClicked = this.state.cards.filter(el => el.id === id);\n    console.log(cardClicked[0]);\n    if (cardClicked[0].clicked === false) {\n      cardClicked[0].clicked = true;\n\n      this.incrementScore();\n      this.shuffle();\n\n    } else {\n      console.log(`You Lost!`);\n      this.setState({ message: `You Lost! Click any image to start over.` });\n      this.changeColor(\"red\");\n      this.shake();\n      this.resetGame();\n      this.shuffle();\n    }\n  };\n\n  incrementScore = () => {\n    const newScore = this.state.score + 1;\n    if (newScore === 12) {\n      console.log(`You won!`)\n      this.setState({\n        score: newScore,\n        message: `Yay, you won! Click any image to start over.`\n      });\n      this.changeColor(\"pink\");\n      this.resetGame();\n\n    } else {\n      console.log(`You guessed correctly!`);\n      this.setState({\n        score: newScore,\n        message: `You guessed correctly. Keep guessing!`\n      });\n      this.changeColor();\n    }\n\n    if (this.state.topScore < newScore) {\n      const newTopScore = this.state.topScore + 1;\n      this.setState({ topScore: newTopScore });\n    }\n  };\n\n  //Fisher-Yates algorithm to shuffle\n  shuffle = () => {\n    const array = this.state.cards;\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  resetGame = () => {\n    const newCards = this.state.cards.map(el => {\n      const newObj = {}\n      newObj[\"id\"] = el.id;\n      newObj[\"name\"] = el.name;\n      newObj[\"image\"] = el.image;\n      newObj[\"clicked\"] = false;\n      return newObj;\n    });\n\n    console.log(newCards);  //updated cards\n    // console.log(this.state.cards);\n    this.setState({\n      score: 0,\n      cards: newCards\n    });\n    console.log(this.state.cards); //why is it not updated?\n  };\n\n  changeColor = (color) => {\n    document.querySelector(\"#msg\").className = \"\";\n\n    switch (color) {\n      case \"red\":\n        document.querySelector(\"#msg\").className = \"red\";\n        break;\n      case \"pink\":\n        document.querySelector(\"#msg\").className = \"pink\";\n        break;\n      default:\n        document.querySelector(\"#msg\").className = \"white\";\n        setTimeout(removeClass, 500);\n        function removeClass() {\n          document.querySelector(\"#msg\").className = \"\";\n        };\n    };\n  };\n\n  shake = () => {\n    document.querySelector(\".card-container\").classList.add(\"shake\");\n    setTimeout(removeClass, 500);\n    function removeClass() {\n      document.querySelector(\".card-container\").classList.remove(\"shake\");\n    };\n  };\n\n\n\n\n  render() {\n    return (\n      <>\n        <Header message={this.state.message} score={this.state.score} topScore={this.state.topScore} />\n\n        <div className=\"card-container\">\n          {this.state.cards.map(el => (\n            <Card\n              changeColor={this.changeColor}\n              cardClick={this.cardClick}\n              id={el.id}\n              key={el.id}\n              name={el.name}\n              image={el.image}\n              clicked={el.clicked}\n            />\n          ))}\n        </div>\n\n      </>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}