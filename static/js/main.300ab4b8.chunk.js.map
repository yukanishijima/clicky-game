{"version":3,"sources":["components/Card/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","data-id","id","onClick","toggleClickFunc","resetGame","cardClick","alt","name","src","image","data-clicked","clicked","Header","type","data-toggle","data-target","color","message","score","topScore","tabIndex","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","href","target","rel","App","state","cards","cardClicked","filter","el","console","log","incrementScore","shuffle","setState","shake","newScore","setTimeout","newTopScore","array","i","length","j","Math","floor","random","temp","newCards","map","newObj","document","querySelector","classList","add","remove","this","changeColor","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.300ab4b8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n  return (\n    <>\n      <div className=\"image-card\" data-id={props.id}\n        onClick={!props.toggleClickFunc ? () => props.cardClick(props.id) : () => props.resetGame()}>\n        <img alt={props.name} src={props.image} data-clicked={props.clicked} />\n      </div>\n    </>\n  );\n};\n\nexport default Card;","import React from 'react';\nimport \"./style.css\";\n\nfunction Header(props) {\n  return (\n    <>\n      <h1>Halloween Clicky Game</h1>\n      <button type=\"button\" className=\"modal-btn\" data-toggle=\"modal\" data-target=\"#instructions\">?</button>\n      <p id=\"msg\" className={props.color}>{props.message}</p>\n\n      <div>\n        <span className=\"score\">Score {props.score}</span>\n        <span className=\"score\">Top Score {props.topScore}</span>\n      </div>\n\n      {/* modal */}\n      <div className=\"modal fade\" id=\"instructions\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"exampleModalCenterTitle\" aria-hidden=\"true\">\n        <div className=\"modal-dialog modal-dialog-centered\" role=\"document\">\n          <div className=\"modal-content\">\n\n            <div className=\"modal-header\">\n              <div className=\"how-to-use\">\n                <p>How to play</p>\n              </div>\n              <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                <span aria-hidden=\"true\" className=\"close-btn\">&times;</span>\n              </button>\n            </div>\n\n            <div className=\"modal-body\">\n              <p><i className=\"fas fa-skull\"></i>&nbsp; Click each image only once and never repeat!</p>\n              <p><i className=\"fas fa-skull\"></i>&nbsp; Be careful, every time any image is clicked, all of the images shuffle in a random order.</p>\n              <p><i className=\"fas fa-skull\"></i>&nbsp; You will loose when you click on the same image more than once!</p>\n            </div>\n            <div className=\"modal-footer\" id=\"my-modal-footer\">\n              <p id=\"special-thanks\"><a href=\"https://www.freepik.com/katemangostar\" target=\"_blank\" rel=\"noopener noreferrer\">Halloween vector illustrations created by katemangostar.</a></p>\n              <button type=\"button\" className=\"btn got-btn\" data-dismiss=\"modal\">Got it?</button>\n            </div>\n\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport './App.css';\nimport Card from \"./components/Card\";\nimport Header from \"./components/Header\";\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n\n  state = {\n    cards,\n    message: \"Click any image to begin!\",\n    score: 0,\n    topScore: 0,\n    color: \"\",\n    toggleClickFunc: false,\n  };\n\n  cardClick = (id) => {\n    const cardClicked = this.state.cards.filter(el => el.id === id);\n    console.log(cardClicked[0]);\n    if (cardClicked[0].clicked === false) {\n      cardClicked[0].clicked = true;\n\n      this.incrementScore();\n      this.shuffle();\n\n    } else {\n      console.log(`You Lost!`);\n      this.setState({\n        message: `You Lost! Click any image to start over.`,\n        color: \"red\",\n        toggleClickFunc: true,\n      });\n      this.shake();\n      this.shuffle();\n    }\n  };\n\n  incrementScore = () => {\n    const newScore = this.state.score + 1;\n    if (newScore === 12) {\n      console.log(`You won!`)\n      this.setState({\n        score: newScore,\n        message: `Yay, you won! Click any image to start over.`,\n        color: \"pink\",\n        toggleClickFunc: true,\n      });\n\n    } else {\n      console.log(`You guessed correctly!`);\n      this.setState({\n        score: newScore,\n        message: `You guessed correctly. Keep guessing!`,\n        color: \"white\"\n      })\n      setTimeout(() => { this.setState({ color: \"\" }) }, 500);\n    }\n\n    if (this.state.topScore < newScore) {\n      const newTopScore = this.state.topScore + 1;\n      this.setState({ topScore: newTopScore });\n    }\n  };\n\n  //Fisher-Yates algorithm to shuffle\n  shuffle = () => {\n    const array = this.state.cards;\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  resetGame = () => {\n    const newCards = this.state.cards.map(el => {\n      const newObj = {}\n      newObj[\"id\"] = el.id;\n      newObj[\"name\"] = el.name;\n      newObj[\"image\"] = el.image;\n      newObj[\"clicked\"] = false;\n      return newObj;\n    });\n\n    this.setState({\n      score: 0,\n      cards: newCards,\n      message: \"Click any image to begin!\",\n      color: \"white\",\n      toggleClickFunc: false,\n    }, () => console.log(this.state.cards));\n  };\n\n  shake = () => {\n    document.querySelector(\".card-container\").classList.add(\"shake\");\n    setTimeout(removeClass, 500);\n    function removeClass() {\n      document.querySelector(\".card-container\").classList.remove(\"shake\");\n    };\n  };\n\n\n\n\n  render() {\n    return (\n      <>\n        <Header color={this.state.color} message={this.state.message} score={this.state.score} topScore={this.state.topScore} />\n\n        <div className=\"card-container\">\n          {this.state.cards.map(el => (\n            <Card\n              changeColor={this.changeColor}\n              cardClick={this.cardClick}\n              resetGame={this.resetGame}\n              toggleClickFunc={this.state.toggleClickFunc}\n              id={el.id}\n              key={el.id}\n              name={el.name}\n              image={el.image}\n              clicked={el.clicked}\n            />\n          ))}\n        </div>\n\n      </>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}